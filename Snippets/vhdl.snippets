snippet library "std and numeric libraries"
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;
endsnippet

snippet signal 
signal $1 : $2 
endsnippet

snippet variable
variable $1 : $2
endsnippet

snippet process "clocked process"
$1 : process(${2:clk})
	$3
begin
	if rising_edge($2) then

	end if; --rising_edge
end process $1;	
endsnippet


snippet process_unclocked "unclocked process"
$1 : process(${2:clk})
	$3
begin

end process $1;	
endsnippet

#== type declarations
snippet unsigned "unsigned x downto 0"
unsigned($1 downto 0);
endsnippet

snippet signed "signed x downto 0"
signed($1 downto 0);
endsnippet

snippet std_logic_vector 
std_logic_vector($1 downto 0);
endsnippet

snippet std_logic	
std_logic;
endsnippet

snippet test_python "simple" !b
`!p snip.rv = "hello"`
endsnippet

snippet uuid "UUID" !b
`!p import uuid
if not snip.c:
	snip.rv =uuid.uuid4().hex`
endsnippet

global !p
def complete(t, opts):
	if t:
		opts =[m[len(t):] for m in opts if m.startswith(t)]
	if len(opts) == 1:
		return opts[0]
	return "(" +'|'.join(opts) + ')'
endglobal

snippet status 
status $1`!p snip.rv=complete(t[1],['new','incomplete','invalid'])`
endsnippet

snippet entity "entity without work library"
entity ${1:top} is
	port (
		
	);
end entity $1;


architecture ${2:rtl} of $1 is
$3

begin
$4

end $2;
endsnippet


snippet if "if-else"
if $1 then
	$2
end if; --$1
endsnippet

snippet case "CASE-end CASE"
CASE $1 is
	$2
end CASE; --$1
endsnippet

snippet package
package $1 is

end $1;
endsnippet
